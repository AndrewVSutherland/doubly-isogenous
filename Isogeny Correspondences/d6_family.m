/* D6 family 
see paper
*/

C := Rationals(); //coefficients
K<u> := FunctionField(C);
S<s,t> := PolynomialRing(C,2);

/*
//need lambda-invariant for the base curve as well.  Have the r-parameters in terms of u, and can convert to Legendre form

r := -u^2 *(u^2 - 9)^2/(u^2 - 1)^2;

R<x> := PolynomialRing(K);
f:= x^3 + (r-18) * x^2 + (81-2  * r) * x + r;
//Jacobian is square of a twist of y^2 = f;  Compute lambda invariant by making roots 0, 1 , lambda
roots_f := Roots(f);
lambda_base := (roots_f[3][1]-roots_f[1][1])/(roots_f[2][1]-roots_f[1][1]);
print roots_f, lambda_base;

[
    <(u^2 + 6*u + 9)/(u^2 - 2*u + 1), 1>,
    <(u^2 - 6*u + 9)/(u^2 + 2*u + 1), 1>,
    <u^2, 1>
]
(-1/16*u^4 + 3/8*u^2 + 1/2*u + 3/16)/u

*/

//lambda invariants for the 5 elliptic curves showing up in decomposition of Jacobian of 2-cover
lambda_base := (-1/16*u^4 + 3/8*u^2 + 1/2*u + 3/16)/u;
lambda_6 := 4*u/((u - 1)*(u + 3))  ;
lambda_3a := 16*u^2/(u^2 + 3)^2   ;
lambda_3b := (u + 1)^2 * (u - 3)^2/(u^2 + 3)^2;
lambda_3c := (u - 1)^2 * (u + 3)^2/(u^2 + 3)^2;

lambda_list := [lambda_base, lambda_6, lambda_3a, lambda_3b,lambda_3c];

/*
P<x> := PolynomialRing(K);
 jInvariant(EllipticCurve(x * (x-1) * (x-lambda_base)));

 etc.
*/
j_base := (u^24 - 36*u^22 + 522*u^20 - 3204*u^18 - 729*u^16 + 106488*u^14 - 304020*u^12 - 1262952*u^10 + 4555359*u^8 + 12218796*u^6 + 1410858*u^4 + 55404*u^2 + 729)/(u^18 - 24*u^16 + 204*u^14 - 
    776*u^12 + 1590*u^10 - 1896*u^8 + 1324*u^6 - 504*u^4 + 81*u^2);
j_6 := (16*u^12 + 288*u^10 + 2160*u^8 + 8640*u^6 + 19440*u^4 + 23328*u^2 + 11664)/(u^10 - 20*u^8 + 118*u^6 - 180*u^4 + 81*u^2);
j_3a := (u^8 - 4 *u^6 + 214 *u^4 - 36 *u^2 + 81)^3/
        (u^4 *  (u^2 + 3)^4   *(u - 3)^2   *(u - 1)^2  * (u + 1)^2  * (u + 3)^2 );
j_3b := (16*u^24 - 192*u^23 + 1728*u^22 - 6208*u^21 + 13344*u^20 + 65472*u^19 - 142912*u^18 + 65856*u^17 + 3513840*u^16 - 191360*u^15 - 19350144*u^14 + 1057152*u^13 + 80022976*u^12 - 
    3171456*u^11 - 174151296*u^10 + 5166720*u^9 + 284621040*u^8 - 16003008*u^7 - 104182848*u^6 - 143187264*u^5 + 87549984*u^4 + 122192064*u^3 + 102036672*u^2 + 34012224*u + 
    8503056)/(u^22 - 4*u^21 - 10*u^20 + 44*u^19 - 43*u^18 + 176*u^17 + 328*u^16 - 1872*u^15 + 1074*u^14 - 5688*u^13 + 324*u^12 + 17064*u^11 + 9666*u^10 + 50544*u^9 + 26568*u^8 - 
    42768*u^7 - 31347*u^6 - 96228*u^5 - 65610*u^4 + 78732*u^3 + 59049*u^2);
j_3c := (16*u^24 + 192*u^23 + 1728*u^22 + 6208*u^21 + 13344*u^20 - 65472*u^19 - 142912*u^18 - 65856*u^17 + 3513840*u^16 + 191360*u^15 - 19350144*u^14 - 1057152*u^13 + 80022976*u^12 + 
    3171456*u^11 - 174151296*u^10 - 5166720*u^9 + 284621040*u^8 + 16003008*u^7 - 104182848*u^6 + 143187264*u^5 + 87549984*u^4 - 122192064*u^3 + 102036672*u^2 - 34012224*u + 
    8503056)/(u^22 + 4*u^21 - 10*u^20 - 44*u^19 - 43*u^18 - 176*u^17 + 328*u^16 + 1872*u^15 + 1074*u^14 + 5688*u^13 + 324*u^12 - 17064*u^11 + 9666*u^10 - 50544*u^9 + 26568*u^8 + 
    42768*u^7 - 31347*u^6 + 96228*u^5 - 65610*u^4 - 78732*u^3 + 59049*u^2);

j_list := [j_base,j_6,j_3a,j_3b,j_3c];

R<x> := PolynomialRing(K);
assert(j_list eq [jInvariant(EllipticCurve(x * (x-1) * (x-lmbda))) : lmbda in lambda_list]);

/*Example: asking for base ~ base and orbit 6 ~ orbit 6
*/

found_factors:=[   <s - t, 1>,
    <s*t - 3, 1>,
    <s*t + 3*s - 3*t + 3, 1>,
    <s + t, 1>,
    <s*t + 3*s + 3*t - 3, 1>,
    <s*t + 3, 1>,
    <s*t - 3*s - 3*t - 3, 1>,
    <s*t - s + t + 3, 1>,
    <s*t - s - t - 3, 1>,
    <s*t + s + t - 3, 1>,
    <s*t - 3*s + 3*t + 3, 1>,
    <s*t + s - t + 3, 1>
];

found_factors := [factor[1] : factor in found_factors]; //looks like all occur with multiplicity 3

onevar_factors := [ (u-3)^(146), (u+3)^(146), (u-1)^(146), (u+1)^(146), u^(146), (u^2 + 3)^(32)]; 

/* Notes
u = +-3, u=0, and u^2 +3 give singular curves
u = +-1 isn't undefined
*/

/*
Values to avoid:
    u,
    u^2 - 9,
    u^2 + 3,
    u^2 - 1,
    u^2 - 3,
    u^4 - 42*u^2 + 9,
    u^4 - 2*u^2 + 9,
    u^8 + 12*u^6 + 310*u^4 + 108*u^2 + 81
*/

/*Example: asking orbit 6 ~ orbit 6 and orbit 3a ~ orbit 3a
*/


found_factors2 := [ (s-t), (s+t),(s*t-3), (s*t+3)];
onevar_factors2 := [ (u-3)^(130), (u+3)^(130), (u-1)^(130), (u+1)^(130), u^(146), (u^2 - 3)^(32), (u^2 + 3)^(114) ,  (u^8 - 228/13*u^6 + 54*u^4 - 2052/13*u^2 + 81)^6
 ];
 //computation took 30-60 minutes depending on computer

/* Here is the result of search_isogenies(s,t,j_list);
*/
known_correspondences := [
    <s^2*t^2 + 3*s^2*t + 3*s*t^2 + 9*s + 9*t - 9, { <<1, 4, 4>, <3, 1, 1>> }>,
    <s^4*t^3 + 2*s^4*t^2 - 3*s^4*t - s^3*t^4 - 6*s^3*t^2 - 9*s^3 - 2*s^2*t^4 + 
        6*s^2*t^3 - 18*s^2*t - 18*s^2 + 3*s*t^4 + 18*s*t^2 + 27*s + 9*t^3 + 
        18*t^2 - 27*t, { <<1, 2, 2>, <1, 4, 4>> }>,
    <s^2*t - s^2 - s*t^2 - 3*s + t^2 + 3*t, { <<1, 1, 1>, <1, 4, 4>> }>,
    <s^2*t^2 - 9, { <<1, 3, 3>, <3, 1, 1>> }>,
    <s^4*t^4 - 10*s^4*t^2 + 9*s^4 + 4*s^3*t^4 + 24*s^3*t^2 + 36*s^3 - 2*s^2*t^4 
        - 108*s^2*t^2 - 18*s^2 - 12*s*t^4 - 72*s*t^2 - 108*s + 9*t^4 - 90*t^2 + 
        81, { <<1, 2, 2>, <1, 5, 3>> }>,
    <s^2*t^2 - 9*s^2 + 6*s*t^2 + 18*s + 9*t^2 - 9, { <<1, 5, 3>, <3, 1, 1>> }>,
    <s^2*t^2 - s^2 + 2*s*t^2 + 6*s + t^2 - 9, { <<1, 1, 1>, <1, 4, 3>> }>,
    <s^2 - t^2, { <<1, 1, 1>, <1, 3, 3>> }>,
    <s^2*t^2 - 6*s^2*t + 9*s^2 - 9*t^2 - 18*t - 9, { <<1, 3, 4>, <3, 1, 1>> }>,
    <s^2*t^2 - s^2 - 2*s*t^2 - 6*s + t^2 - 9, { <<1, 1, 1>, <1, 5, 3>> }>,
    <s^2*t^2 - 9*s^2 - 6*s*t^2 - 18*s + 9*t^2 - 9, { <<1, 4, 3>, <3, 1, 1>> }>,
    <s^2*t^2 - 3*s^2*t + 3*s*t^2 + 9*s - 9*t - 9, { <<1, 4, 5>, <3, 1, 1>> }>,
    <s^6*t^6 - 18*s^6*t^4 + 81*s^6*t^2 - 18*s^4*t^6 - 405*s^4*t^4 - 729*s^4 + 
        81*s^2*t^6 + 3645*s^2*t^2 + 1458*s^2 - 729*t^4 + 1458*t^2 - 729, { <<1, 
    2, 2>, <3, 1, 1>> }>,
    <s^2*t^2 + 2*s^2*t - 3*s^2 + 2*s*t^2 - 12*s*t - 6*s - 3*t^2 - 6*t + 9, { 
    <<1, 3, 5>, <1, 5, 3>>, <<1, 4, 4>, <1, 5, 3>>, <<1, 3, 5>, <1, 4, 4>> }>,
    <s^4*t^3 - 2*s^4*t^2 - 3*s^4*t - s^3*t^4 - 6*s^3*t^2 - 9*s^3 + 2*s^2*t^4 + 
        6*s^2*t^3 - 18*s^2*t + 18*s^2 + 3*s*t^4 + 18*s*t^2 + 27*s + 9*t^3 - 
        18*t^2 - 27*t, { <<1, 2, 2>, <1, 5, 5>> }>,
    <s^2*t - s^2 + s*t^2 + 3*s + t^2 + 3*t, { <<1, 1, 1>, <1, 5, 4>> }>,
    <s^2*t^2 - 2*s^2*t - 3*s^2 - 2*s*t^2 - 12*s*t + 6*s - 3*t^2 + 6*t + 9, { 
    <<1, 3, 4>, <1, 4, 3>>, <<1, 4, 3>, <1, 5, 5>>, <<1, 3, 4>, <1, 5, 5>> }>,
    <s^2*t^2 + 2*s^2*t - 3*s^2 - 2*s*t^2 + 12*s*t + 6*s - 3*t^2 - 6*t + 9, { 
    <<1, 3, 5>, <1, 4, 3>>, <<1, 4, 3>, <1, 5, 4>>, <<1, 3, 5>, <1, 5, 4>> }>,
    <s^4*t^2 - s^2*t^4 - 9*s^2 + 9*t^2, { <<1, 2, 2>, <1, 3, 3>> }>,
    <s^4*t^3 + 2*s^4*t^2 - 3*s^4*t + s^3*t^4 + 6*s^3*t^2 + 9*s^3 - 2*s^2*t^4 + 
        6*s^2*t^3 - 18*s^2*t - 18*s^2 - 3*s*t^4 - 18*s*t^2 - 27*s + 9*t^3 + 
        18*t^2 - 27*t, { <<1, 2, 2>, <1, 5, 4>> }>,
    <s^4*t^3 - 2*s^4*t^2 - 3*s^4*t + s^3*t^4 + 6*s^3*t^2 + 9*s^3 + 2*s^2*t^4 + 
        6*s^2*t^3 - 18*s^2*t + 18*s^2 - 3*s*t^4 - 18*s*t^2 - 27*s + 9*t^3 - 
        18*t^2 - 27*t, { <<1, 2, 2>, <1, 4, 5>> }>,
    <s^2*t + s^2 + s*t^2 + 3*s - t^2 + 3*t, { <<1, 1, 1>, <1, 4, 5>> }>,
    <s^2*t^2 - 3*s^2*t - 3*s*t^2 - 9*s - 9*t - 9, { <<1, 5, 5>, <3, 1, 1>> }>,
    <s^4*t^4 + 4*s^4*t^3 - 2*s^4*t^2 - 12*s^4*t + 9*s^4 - 10*s^2*t^4 + 
        24*s^2*t^3 - 108*s^2*t^2 - 72*s^2*t - 90*s^2 + 9*t^4 + 36*t^3 - 18*t^2 -
        108*t + 81, { <<1, 2, 2>, <1, 3, 5>> }>,
    <s^6*t^4 - 2*s^6*t^2 + s^6 - s^4*t^6 - 45*s^4*t^2 - 18*s^4 + 2*s^2*t^6 + 
        45*s^2*t^4 + 81*s^2 - t^6 + 18*t^4 - 81*t^2, { <<1, 1, 1>, <1, 2, 2>> 
    }>,
    <s^2*t - s*t^2 + 3*s - 3*t, { <<1, 4, 4>, <1, 5, 5>>, <<1, 3, 3>, <1, 5, 
    5>>, <<1, 3, 3>, <1, 4, 4>> }>,
    <s^2*t^2 + 6*s^2*t + 9*s^2 - 9*t^2 + 18*t - 9, { <<1, 3, 5>, <3, 1, 1>> }>,
    <s^4*t^4 - 10*s^4*t^2 + 9*s^4 - 4*s^3*t^4 - 24*s^3*t^2 - 36*s^3 - 2*s^2*t^4 
        - 108*s^2*t^2 - 18*s^2 + 12*s*t^4 + 72*s*t^2 + 108*s + 9*t^4 - 90*t^2 + 
        81, { <<1, 2, 2>, <1, 4, 3>> }>,
    <s^2*t^2 + 3*s^2*t - 3*s*t^2 - 9*s + 9*t - 9, { <<1, 5, 4>, <3, 1, 1>> }>,
    <s^2*t^2 - 2*s^2*t - 3*s^2 + 2*s*t^2 + 12*s*t - 6*s - 3*t^2 + 6*t + 9, { 
    <<1, 3, 4>, <1, 4, 5>>, <<1, 4, 5>, <1, 5, 3>>, <<1, 3, 4>, <1, 5, 3>> }>,
    <s^2*t^2 + 2*s^2*t + s^2 - t^2 + 6*t - 9, { <<1, 1, 1>, <1, 3, 4>> }>,
    <s^2*t + s^2 - s*t^2 - 3*s - t^2 + 3*t, { <<1, 1, 1>, <1, 5, 5>> }>,
    <s^4*t^4 - 4*s^4*t^3 - 2*s^4*t^2 + 12*s^4*t + 9*s^4 - 10*s^2*t^4 - 
        24*s^2*t^3 - 108*s^2*t^2 + 72*s^2*t - 90*s^2 + 9*t^4 - 36*t^3 - 18*t^2 +
        108*t + 81, { <<1, 2, 2>, <1, 3, 4>> }>,
    <s^2*t^2 - 2*s^2*t + s^2 - t^2 - 6*t - 9, { <<1, 1, 1>, <1, 3, 5>> }>,
    <s^2*t + s*t^2 - 3*s - 3*t, { <<1, 3, 3>, <1, 4, 5>>, <<1, 3, 3>, <1, 5, 
    4>>, <<1, 4, 5>, <1, 5, 4>> }>
];

//generate trivial correspondences for D6 family caused parametrization
function generate_correspondences_d6()
	//already have K<u>
	parameters := [u,-u, 3/u,-3/u, (u+3)/(u-1), -1 * (u+3)/(u-1) , 3 * (u-1)/(u+3), -3 * (u-1)/(u+3), (u-3)/(u+1), -1 * (u-3)/(u+1), 3 * ( u+1)/(u-3), -3 * (u+1)/(u-3) ];
	//already have S<s,t>

	basic_correspondences := {};

	for param1 in parameters do
		for param2 in parameters do
			num :=Numerator(Evaluate(param1,s) - Evaluate(param2,t));
			basic_correspondences := basic_correspondences join {factor[1] : factor in Factorization(num) };
		end for;
	end for;

	return basic_correspondences;
end function;